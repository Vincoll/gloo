// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/compressor/v3/compressor.proto

package v3

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *Compressor) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Compressor)
	if !ok {
		that2, ok := that.(Compressor)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetContentLength()).(equality.Equalizer); ok {
		if !h.Equal(target.GetContentLength()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetContentLength(), target.GetContentLength()) {
			return false
		}
	}

	if len(m.GetContentType()) != len(target.GetContentType()) {
		return false
	}
	for idx, v := range m.GetContentType() {

		if strings.Compare(v, target.GetContentType()[idx]) != 0 {
			return false
		}

	}

	if m.GetDisableOnEtagHeader() != target.GetDisableOnEtagHeader() {
		return false
	}

	if m.GetRemoveAcceptEncodingHeader() != target.GetRemoveAcceptEncodingHeader() {
		return false
	}

	if h, ok := interface{}(m.GetRuntimeEnabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRuntimeEnabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRuntimeEnabled(), target.GetRuntimeEnabled()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCompressorLibrary()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCompressorLibrary()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCompressorLibrary(), target.GetCompressorLibrary()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequestDirectionConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequestDirectionConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequestDirectionConfig(), target.GetRequestDirectionConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetResponseDirectionConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetResponseDirectionConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetResponseDirectionConfig(), target.GetResponseDirectionConfig()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Compressor_CommonDirectionConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Compressor_CommonDirectionConfig)
	if !ok {
		that2, ok := that.(Compressor_CommonDirectionConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetEnabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnabled(), target.GetEnabled()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMinContentLength()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMinContentLength()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMinContentLength(), target.GetMinContentLength()) {
			return false
		}
	}

	if len(m.GetContentType()) != len(target.GetContentType()) {
		return false
	}
	for idx, v := range m.GetContentType() {

		if strings.Compare(v, target.GetContentType()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *Compressor_RequestDirectionConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Compressor_RequestDirectionConfig)
	if !ok {
		that2, ok := that.(Compressor_RequestDirectionConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommonConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommonConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommonConfig(), target.GetCommonConfig()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Compressor_ResponseDirectionConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Compressor_ResponseDirectionConfig)
	if !ok {
		that2, ok := that.(Compressor_ResponseDirectionConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommonConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommonConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommonConfig(), target.GetCommonConfig()) {
			return false
		}
	}

	if m.GetDisableOnEtagHeader() != target.GetDisableOnEtagHeader() {
		return false
	}

	if m.GetRemoveAcceptEncodingHeader() != target.GetRemoveAcceptEncodingHeader() {
		return false
	}

	return true
}
